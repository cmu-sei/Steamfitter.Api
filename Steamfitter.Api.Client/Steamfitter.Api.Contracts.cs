/*
Copyright 2021 Carnegie Mellon University. All Rights Reserved. 
 Released under a MIT (SEI)-style license. See LICENSE.md in the project root for license information.
*/

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"

namespace Steamfitter.Api.Client
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface ISteamfitterApiClient
    {
        /// <summary>Gets all BondAgent in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BondAgent>> GetBondAgentsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all BondAgent in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BondAgent>> GetBondAgentsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new BondAgent</summary>
        /// <param name="body">The data to create the BondAgent with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondAgent> CreateBondAgentAsync(BondAgent body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new BondAgent</summary>
        /// <param name="body">The data to create the BondAgent with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondAgent> CreateBondAgentAsync(BondAgent body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a specific BondAgent by id</summary>
        /// <param name="id">The id of the BondAgent</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondAgent> GetBondAgentAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a specific BondAgent by id</summary>
        /// <param name="id">The id of the BondAgent</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondAgent> GetBondAgentAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates a BondAgent</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated BondAgent values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondAgent> UpdateBondAgentAsync(System.Guid id, BondAgent body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a BondAgent</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated BondAgent values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BondAgent> UpdateBondAgentAsync(System.Guid id, BondAgent body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes a BondAgent</summary>
        /// <param name="id">The id of the BondAgent to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBondAgentAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a BondAgent</summary>
        /// <param name="id">The id of the BondAgent to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteBondAgentAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all files that a user can dispatch to guest vms</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FileInfo>> GetAllFilesAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all files that a user can dispatch to guest vms</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FileInfo>> GetAllFilesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a file that a user can dispatch to guest vms</summary>
        /// <param name="id">Id of the file</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileInfo> GetFileByIdAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a file that a user can dispatch to guest vms</summary>
        /// <param name="id">Id of the file</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileInfo> GetFileByIdAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes a file record and the actual file</summary>
        /// <param name="id">File to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FileInfo>> DeleteFileAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a file record and the actual file</summary>
        /// <param name="id">File to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FileInfo>> DeleteFileAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Checks the liveliness health endpoint</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthStatus> Health_GetLivelinessAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Checks the liveliness health endpoint</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthStatus> Health_GetLivelinessAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Checks the readiness health endpoint</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthStatus> Health_GetReadinessAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Checks the readiness health endpoint</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthStatus> Health_GetReadinessAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Permission in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetPermissionsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Permission in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetPermissionsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new Permission</summary>
        /// <param name="body">The data to create the Permission with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> CreatePermissionAsync(Permission body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new Permission</summary>
        /// <param name="body">The data to create the Permission with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> CreatePermissionAsync(Permission body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets Permissions for the current user</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetMyPermissionsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets Permissions for the current user</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetMyPermissionsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets Permissions for the specified user</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetPermissionsByUserAsync(System.Guid userId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets Permissions for the specified user</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Permission>> GetPermissionsByUserAsync(System.Guid userId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a specific Permission by id</summary>
        /// <param name="id">The id of the Permission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> GetPermissionAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a specific Permission by id</summary>
        /// <param name="id">The id of the Permission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> GetPermissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates a Permission</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Permission values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> UpdatePermissionAsync(System.Guid id, Permission body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a Permission</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Permission values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permission> UpdatePermissionAsync(System.Guid id, Permission body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes a Permission</summary>
        /// <param name="id">The id of the Permission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePermissionAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a Permission</summary>
        /// <param name="id">The id of the Permission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePermissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Views this user can dispatch</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<View>> GetViewsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Views this user can dispatch</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<View>> GetViewsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all VM's this user can dispatch to</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Vm>> GetVmsAsync(System.Guid? viewId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all VM's this user can dispatch to</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Vm>> GetVmsAsync(System.Guid? viewId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Result in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Result>> GetResultsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Result in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Result>> GetResultsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new Result</summary>
        /// <param name="body">The data to create the Result with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> CreateResultAsync(Result body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new Result</summary>
        /// <param name="body">The data to create the Result with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> CreateResultAsync(Result body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Results for a Scenario</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetScenarioResultsAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Results for a Scenario</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetScenarioResultsAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Results for a Task</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetTaskResultsAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Results for a Task</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetTaskResultsAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Results for an View</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetViewResultsAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Results for an View</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetViewResultsAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all manual Results for a User</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetUserResultsAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all manual Results for a User</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetUserResultsAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all manual Results for the current User</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetMyResultsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all manual Results for the current User</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetMyResultsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Results for a VM</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetVmResultsAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Results for a VM</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetVmResultsAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a specific Result by id</summary>
        /// <param name="id">The id of the Result</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> GetResultAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a specific Result by id</summary>
        /// <param name="id">The id of the Result</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> GetResultAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates an Result</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Result values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> UpdateResultAsync(System.Guid id, Result body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates an Result</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Result values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Result> UpdateResultAsync(System.Guid id, Result body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes an Result</summary>
        /// <param name="id">The id of the Result to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteResultAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes an Result</summary>
        /// <param name="id">The id of the Result to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteResultAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Scenario in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Scenario>> GetScenariosAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Scenario in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Scenario>> GetScenariosAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new Scenario</summary>
        /// <param name="body">The data to create the Scenario with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> CreateScenarioAsync(Scenario body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new Scenario</summary>
        /// <param name="body">The data to create the Scenario with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> CreateScenarioAsync(Scenario body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a specific Scenario by id</summary>
        /// <param name="id">The id of the Scenario</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> GetScenarioAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a specific Scenario by id</summary>
        /// <param name="id">The id of the Scenario</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> GetScenarioAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates a Scenario</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Scenario values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> UpdateScenarioAsync(System.Guid id, Scenario body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a Scenario</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Scenario values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> UpdateScenarioAsync(System.Guid id, Scenario body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes an Scenario</summary>
        /// <param name="id">The id of the Scenario to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScenarioAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes an Scenario</summary>
        /// <param name="id">The id of the Scenario to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScenarioAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets the personal Scenario for the current user</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> GetMyScenarioAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets the personal Scenario for the current user</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> GetMyScenarioAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new Scenario from a ScenarioTemplate</summary>
        /// <param name="id">The ScenarioTemplate ID to create the Scenario with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> CreateScenarioFromScenarioTemplateAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new Scenario from a ScenarioTemplate</summary>
        /// <param name="id">The ScenarioTemplate ID to create the Scenario with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> CreateScenarioFromScenarioTemplateAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new Scenario from a Scenario</summary>
        /// <param name="id">The Scenario ID to copy into a new Scenario</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> CopyScenarioAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new Scenario from a Scenario</summary>
        /// <param name="id">The Scenario ID to copy into a new Scenario</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> CopyScenarioAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Adds Users to a Scenario</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> AddUsersToScenarioAsync(System.Guid id, System.Collections.Generic.IEnumerable<System.Guid> body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Adds Users to a Scenario</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> AddUsersToScenarioAsync(System.Guid id, System.Collections.Generic.IEnumerable<System.Guid> body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Start a Scenario</summary>
        /// <param name="id">The Id of the Scenario to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> StartScenarioAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start a Scenario</summary>
        /// <param name="id">The Id of the Scenario to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> StartScenarioAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Pause a Scenario</summary>
        /// <param name="id">The Id of the Scenario to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> PauseScenarioAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Pause a Scenario</summary>
        /// <param name="id">The Id of the Scenario to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> PauseScenarioAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Continue a Scenario</summary>
        /// <param name="id">The Id of the Scenario to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> ContinueScenarioAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Continue a Scenario</summary>
        /// <param name="id">The Id of the Scenario to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> ContinueScenarioAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>End a Scenario</summary>
        /// <param name="id">The Id of the Scenario to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> EndScenarioAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>End a Scenario</summary>
        /// <param name="id">The Id of the Scenario to update</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Scenario> EndScenarioAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all ScenarioTemplate in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScenarioTemplate>> GetScenarioTemplatesAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all ScenarioTemplate in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScenarioTemplate>> GetScenarioTemplatesAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new ScenarioTemplate</summary>
        /// <param name="body">The data to create the ScenarioTemplate with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioTemplate> CreateScenarioTemplateAsync(ScenarioTemplate body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new ScenarioTemplate</summary>
        /// <param name="body">The data to create the ScenarioTemplate with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioTemplate> CreateScenarioTemplateAsync(ScenarioTemplate body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a specific ScenarioTemplate by id</summary>
        /// <param name="id">The id of the ScenarioTemplate</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioTemplate> GetScenarioTemplateAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a specific ScenarioTemplate by id</summary>
        /// <param name="id">The id of the ScenarioTemplate</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioTemplate> GetScenarioTemplateAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates an ScenarioTemplate</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated ScenarioTemplate values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioTemplate> UpdateScenarioTemplateAsync(System.Guid id, ScenarioTemplate body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates an ScenarioTemplate</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated ScenarioTemplate values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioTemplate> UpdateScenarioTemplateAsync(System.Guid id, ScenarioTemplate body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes an ScenarioTemplate</summary>
        /// <param name="id">The id of the ScenarioTemplate to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScenarioTemplateAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes an ScenarioTemplate</summary>
        /// <param name="id">The id of the ScenarioTemplate to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScenarioTemplateAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Copies a new ScenarioTemplate</summary>
        /// <param name="id">The ID of scenarioTemplate to copy</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioTemplate> CopyScenarioTemplateAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Copies a new ScenarioTemplate</summary>
        /// <param name="id">The ID of scenarioTemplate to copy</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScenarioTemplate> CopyScenarioTemplateAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Task in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetTasksAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Task in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetTasksAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new Task</summary>
        /// <param name="body">The data to create the Task with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> CreateTaskAsync(Task body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new Task</summary>
        /// <param name="body">The data to create the Task with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> CreateTaskAsync(Task body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Tasks for a ScenarioTemplate</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetScenarioTemplateTasksAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Tasks for a ScenarioTemplate</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetScenarioTemplateTasksAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Tasks for a Scenario</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetScenarioTasksAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Tasks for a Scenario</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetScenarioTasksAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Tasks for an View</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetViewTasksAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Tasks for an View</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetViewTasksAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all manual Tasks for a User</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetUserTasksAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all manual Tasks for a User</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetUserTasksAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Tasks for a VM</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetVmTasksAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Tasks for a VM</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetVmTasksAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Tasks for a Trigger Task (Parent)</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetSubtasksAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Tasks for a Trigger Task (Parent)</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetSubtasksAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all manual Tasks for the current User</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetMyTasksAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all manual Tasks for the current User</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> GetMyTasksAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a specific Task by id</summary>
        /// <param name="id">The id of the STT.Task</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> GetTaskAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a specific Task by id</summary>
        /// <param name="id">The id of the STT.Task</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> GetTaskAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates a Task</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Task values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> UpdateTaskAsync(System.Guid id, Task body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a Task</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated Task values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> UpdateTaskAsync(System.Guid id, Task body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes a Task</summary>
        /// <param name="id">The id of the Task to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTaskAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a Task</summary>
        /// <param name="id">The id of the Task to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTaskAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Copies a Task</summary>
        /// <param name="id">The Id of the Task to copy</param>
        /// <param name="body">The Id and type of the new location</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> CopyTaskAsync(System.Guid id, NewLocation body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Copies a Task</summary>
        /// <param name="id">The Id of the Task to copy</param>
        /// <param name="body">The Id and type of the new location</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> CopyTaskAsync(System.Guid id, NewLocation body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a Task from a Result</summary>
        /// <param name="resultId">The Id of the Result</param>
        /// <param name="body">The Id and type of the new location</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> CreateTaskFromResultAsync(System.Guid resultId, NewLocation body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a Task from a Result</summary>
        /// <param name="resultId">The Id of the Result</param>
        /// <param name="body">The Id and type of the new location</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Task> CreateTaskFromResultAsync(System.Guid resultId, NewLocation body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new Task and executes it</summary>
        /// <param name="body">The data to create the Task with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Result>> CreateAndExecuteTaskAsync(Task body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new Task and executes it</summary>
        /// <param name="body">The data to create the Task with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Result>> CreateAndExecuteTaskAsync(Task body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Executes a specific Task by id</summary>
        /// <param name="id">The id of the STT.Task</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Result>> ExecuteTaskAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Executes a specific Task by id</summary>
        /// <param name="id">The id of the STT.Task</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Result>> ExecuteTaskAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Moves a Task</summary>
        /// <param name="id">The Id of the Task to move</param>
        /// <param name="body">The Id and type of the new location</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> MoveTaskAsync(System.Guid id, NewLocation body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Moves a Task</summary>
        /// <param name="id">The Id of the Task to move</param>
        /// <param name="body">The Id and type of the new location</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Task>> MoveTaskAsync(System.Guid id, NewLocation body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all possible Task commands</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetAvailableCommandsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all possible Task commands</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetAvailableCommandsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all Users in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetUsersAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all Users in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetUsersAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new User</summary>
        /// <param name="body">The data to create the User with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> CreateUserAsync(User body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new User</summary>
        /// <param name="body">The data to create the User with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> CreateUserAsync(User body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a specific User by id</summary>
        /// <param name="id">The id of the User</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> GetUserAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a specific User by id</summary>
        /// <param name="id">The id of the User</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> GetUserAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes a User</summary>
        /// <param name="id">The id of the User to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a User</summary>
        /// <param name="id">The id of the User to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all UserPermissions in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserPermission>> GetUserPermissionsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all UserPermissions in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserPermission>> GetUserPermissionsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new UserPermission</summary>
        /// <param name="body">The data to create the UserPermission with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserPermission> CreateUserPermissionAsync(UserPermission body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new UserPermission</summary>
        /// <param name="body">The data to create the UserPermission with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserPermission> CreateUserPermissionAsync(UserPermission body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a specific UserPermission by id</summary>
        /// <param name="id">The id of the UserPermission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserPermission> GetUserPermissionAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a specific UserPermission by id</summary>
        /// <param name="id">The id of the UserPermission</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserPermission> GetUserPermissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes a UserPermission</summary>
        /// <param name="id">The id of the UserPermission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserPermissionAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a UserPermission</summary>
        /// <param name="id">The id of the UserPermission to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserPermissionAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes a UserPermission by user ID and permission ID</summary>
        /// <param name="userId">ID of a user.</param>
        /// <param name="permissionId">ID of a permission.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserPermissionByIdsAsync(System.Guid userId, System.Guid permissionId);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a UserPermission by user ID and permission ID</summary>
        /// <param name="userId">ID of a user.</param>
        /// <param name="permissionId">ID of a permission.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserPermissionByIdsAsync(System.Guid userId, System.Guid permissionId, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all VmCredentials in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VmCredential>> GetVmCredentialsAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all VmCredentials in the system</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VmCredential>> GetVmCredentialsAsync(System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Creates a new VmCredential</summary>
        /// <param name="body">The data to create the VmCredential with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VmCredential> CreateVmCredentialAsync(VmCredential body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates a new VmCredential</summary>
        /// <param name="body">The data to create the VmCredential with</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VmCredential> CreateVmCredentialAsync(VmCredential body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all VmCredentials for a ScenarioTemplate</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VmCredential>> GetScenarioTemplateVmCredentialsAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all VmCredentials for a ScenarioTemplate</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VmCredential>> GetScenarioTemplateVmCredentialsAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets all VmCredentials for a Scenario</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VmCredential>> GetScenarioVmCredentialsAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets all VmCredentials for a Scenario</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VmCredential>> GetScenarioVmCredentialsAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Gets a specific VmCredential by id</summary>
        /// <param name="id">The id of the STT.Task</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VmCredential> GetVmCredentialAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Gets a specific VmCredential by id</summary>
        /// <param name="id">The id of the STT.Task</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VmCredential> GetVmCredentialAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Updates a VmCredential</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated VmCredential values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VmCredential> UpdateVmCredentialAsync(System.Guid id, VmCredential body);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates a VmCredential</summary>
        /// <param name="id">The Id of the Exericse to update</param>
        /// <param name="body">The updated VmCredential values</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VmCredential> UpdateVmCredentialAsync(System.Guid id, VmCredential body, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Deletes a VmCredential</summary>
        /// <param name="id">The id of the VmCredential to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVmCredentialAsync(System.Guid id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes a VmCredential</summary>
        /// <param name="id">The id of the VmCredential to delete</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteVmCredentialAsync(System.Guid id, System.Threading.CancellationToken cancellationToken);
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LocalUser 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public string Username { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("domain")]
        public string Domain { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("isCurrent")]
        public bool IsCurrent { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class OS 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("platform")]
        public string Platform { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("servicePack")]
        public string ServicePack { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public string Version { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("versionString")]
        public string VersionString { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SshPort 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("server")]
        public string Server { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("serverPort")]
        public int ServerPort { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("guest")]
        public string Guest { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("guestPort")]
        public int GuestPort { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MonitoredTool 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("isRunning")]
        public bool IsRunning { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("version")]
        public string Version { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("location")]
        public string Location { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class BondAgent 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("machineName")]
        public string MachineName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("fqdn")]
        public string Fqdn { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("guestIp")]
        public string GuestIp { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("vmWareUuid")]
        public System.Guid VmWareUuid { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("vmWareName")]
        public System.Guid VmWareName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("agentName")]
        public string AgentName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("agentVersion")]
        public string AgentVersion { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("agentInstalledPath")]
        public string AgentInstalledPath { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("localUsers")]
        public System.Collections.Generic.ICollection<LocalUser> LocalUsers { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("operatingSystem")]
        public OS OperatingSystem { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("sshPorts")]
        public System.Collections.Generic.ICollection<SshPort> SshPorts { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("checkinTime")]
        public System.DateTimeOffset? CheckinTime { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("monitoredTools")]
        public System.Collections.Generic.ICollection<MonitoredTool> MonitoredTools { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ProblemDetails 
    {
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int? Status { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string Detail { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        public string Instance { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FileAttributes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ReadOnly")]
        ReadOnly = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Hidden")]
        Hidden = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"System")]
        System = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Directory")]
        Directory = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Archive")]
        Archive = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Device")]
        Device = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Normal")]
        Normal = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Temporary")]
        Temporary = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SparseFile")]
        SparseFile = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ReparsePoint")]
        ReparsePoint = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Compressed")]
        Compressed = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Offline")]
        Offline = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NotContentIndexed")]
        NotContentIndexed = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Encrypted")]
        Encrypted = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"IntegrityStream")]
        IntegrityStream = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NoScrubData")]
        NoScrubData = 15,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DirectoryInfo 
    {
        [System.Text.Json.Serialization.JsonPropertyName("parent")]
        public DirectoryInfo Parent { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("root")]
        public DirectoryInfo Root { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string FullName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("extension")]
        public string Extension { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("exists")]
        public bool Exists { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("creationTime")]
        public System.DateTimeOffset CreationTime { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("creationTimeUtc")]
        public System.DateTimeOffset CreationTimeUtc { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("lastAccessTime")]
        public System.DateTimeOffset LastAccessTime { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("lastAccessTimeUtc")]
        public System.DateTimeOffset LastAccessTimeUtc { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("lastWriteTime")]
        public System.DateTimeOffset LastWriteTime { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("lastWriteTimeUtc")]
        public System.DateTimeOffset LastWriteTimeUtc { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FileAttributes Attributes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FileInfo 
    {
        [System.Text.Json.Serialization.JsonPropertyName("length")]
        public long Length { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("directoryName")]
        public string DirectoryName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("directory")]
        public DirectoryInfo Directory { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("isReadOnly")]
        public bool IsReadOnly { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("fullName")]
        public string FullName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("extension")]
        public string Extension { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("exists")]
        public bool Exists { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("creationTime")]
        public System.DateTimeOffset CreationTime { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("creationTimeUtc")]
        public System.DateTimeOffset CreationTimeUtc { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("lastAccessTime")]
        public System.DateTimeOffset LastAccessTime { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("lastAccessTimeUtc")]
        public System.DateTimeOffset LastAccessTimeUtc { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("lastWriteTime")]
        public System.DateTimeOffset LastWriteTime { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("lastWriteTimeUtc")]
        public System.DateTimeOffset LastWriteTimeUtc { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FileAttributes Attributes { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HealthStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unhealthy")]
        Unhealthy = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Degraded")]
        Degraded = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Healthy")]
        Healthy = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Permission 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("key")]
        public string Key { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("readOnly")]
        public bool ReadOnly { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class View 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string Status { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("canManage")]
        public bool? CanManage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ConsoleConnectionInfo 
    {
        [System.Text.Json.Serialization.JsonPropertyName("hostname")]
        public string Hostname { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("port")]
        public string Port { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        public string Protocol { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public string Username { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string Password { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vm 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("url")]
        public string Url { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public System.Guid? UserId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("allowedNetworks")]
        public System.Collections.Generic.ICollection<string> AllowedNetworks { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("powerState")]
        public string PowerState { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("ipAddresses")]
        public System.Collections.Generic.ICollection<string> IpAddresses { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("teamIds")]
        public System.Collections.Generic.ICollection<System.Guid> TeamIds { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("hasPendingTasks")]
        public bool? HasPendingTasks { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("consoleConnectionInfo")]
        public ConsoleConnectionInfo ConsoleConnectionInfo { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum TaskAction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"guest_process_run")]
        Guest_process_run = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"guest_file_read")]
        Guest_file_read = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"guest_file_write")]
        Guest_file_write = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"vm_hw_power_off")]
        Vm_hw_power_off = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"vm_hw_power_on")]
        Vm_hw_power_on = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"vm_create_from_template")]
        Vm_create_from_template = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"vm_hw_remove")]
        Vm_hw_remove = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"guest_process_run_fast")]
        Guest_process_run_fast = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"guest_file_upload_content")]
        Guest_file_upload_content = 8,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum TaskStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"queued")]
        Queued = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"sent")]
        Sent = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"cancelled")]
        Cancelled = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"expired")]
        Expired = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"failed")]
        Failed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"succeeded")]
        Succeeded = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Result 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("taskId")]
        public System.Guid? TaskId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("vmId")]
        public System.Guid? VmId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("vmName")]
        public string VmName { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("apiUrl")]
        public string ApiUrl { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("action")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TaskAction Action { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("actionParameters")]
        public System.Collections.Generic.IDictionary<string, string> ActionParameters { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("expirationSeconds")]
        public int ExpirationSeconds { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("iterations")]
        public int Iterations { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("currentIteration")]
        public int CurrentIteration { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("intervalSeconds")]
        public int IntervalSeconds { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TaskStatus Status { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("expectedOutput")]
        public string ExpectedOutput { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("actualOutput")]
        public string ActualOutput { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("sentDate")]
        public System.DateTimeOffset SentDate { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("statusDate")]
        public System.DateTimeOffset StatusDate { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum TaskIterationTermination
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IterationCount")]
        IterationCount = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UntilSuccess")]
        UntilSuccess = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UntilFailure")]
        UntilFailure = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum TaskTrigger
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Time")]
        Time = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Success")]
        Success = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failure")]
        Failure = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Completion")]
        Completion = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Expiration")]
        Expiration = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Task 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("scenarioTemplateId")]
        public System.Guid? ScenarioTemplateId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("scenarioId")]
        public System.Guid? ScenarioId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public System.Guid? UserId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("action")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TaskAction Action { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("vmMask")]
        public string VmMask { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("vmList")]
        public System.Collections.Generic.ICollection<System.Guid> VmList { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("apiUrl")]
        public string ApiUrl { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("actionParameters")]
        public System.Collections.Generic.IDictionary<string, string> ActionParameters { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("expectedOutput")]
        public string ExpectedOutput { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("expirationSeconds")]
        public int ExpirationSeconds { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("delaySeconds")]
        public int DelaySeconds { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("intervalSeconds")]
        public int IntervalSeconds { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("iterations")]
        public int Iterations { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("iterationTermination")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TaskIterationTermination IterationTermination { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("currentIteration")]
        public int CurrentIteration { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("triggerTaskId")]
        public System.Guid? TriggerTaskId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("triggerCondition")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TaskTrigger TriggerCondition { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("score")]
        public int Score { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TaskStatus Status { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("scoreEarned")]
        public int ScoreEarned { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("userExecutable")]
        public bool UserExecutable { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ScenarioStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ready")]
        Ready = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"paused")]
        Paused = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ended")]
        Ended = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"error")]
        Error = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class VmCredential 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("scenarioTemplateId")]
        public System.Guid? ScenarioTemplateId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("scenarioId")]
        public System.Guid? ScenarioId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public string Username { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string Password { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Scenario 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        public System.DateTimeOffset StartDate { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        public System.DateTimeOffset EndDate { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ScenarioStatus Status { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("onDemand")]
        public bool OnDemand { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("scenarioTemplateId")]
        public System.Guid? ScenarioTemplateId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("viewId")]
        public System.Guid? ViewId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public string View { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("defaultVmCredentialId")]
        public System.Guid? DefaultVmCredentialId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("vmCredentials")]
        public System.Collections.Generic.ICollection<VmCredential> VmCredentials { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<System.Guid> Users { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ScenarioTemplate 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("durationHours")]
        public int? DurationHours { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("defaultVmCredentialId")]
        public System.Guid? DefaultVmCredentialId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("vmCredentials")]
        public System.Collections.Generic.ICollection<VmCredential> VmCredentials { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NewLocation 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid? Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("locationType")]
        public string LocationType { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class User 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        public System.Collections.Generic.ICollection<Permission> Permissions { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.3.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UserPermission 
    {
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public System.Guid Id { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public System.Guid UserId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("permissionId")]
        public System.Guid PermissionId { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateCreated")]
        public System.DateTimeOffset DateCreated { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("dateModified")]
        public System.DateTimeOffset? DateModified { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("createdBy")]
        public System.Guid CreatedBy { get; set; }
    
        [System.Text.Json.Serialization.JsonPropertyName("modifiedBy")]
        public System.Guid? ModifiedBy { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108